
-任务-
从《离散数学》教材的知识文本中提取关键的知识实体及其之间的关系。

-步骤-
1. 识别并提取实体。对于每个知识实体，需收集以下信息：
- entity_name：实体的具体名称，应当是一个知识名词，不得包含公式字母、图片编号等非实体名称内容，不得是完整标题或章节名
- entity_type：实体类型必须是以下之一：[{entity_types}]
- entity_description：全面描述实体的属性和定义，不包括用于解释或辅助理解的例子
将每个实体格式化为：("entity"{tuple_delimiter}<entity_name>{tuple_delimiter}<entity_type>{tuple_delimiter}<entity_description>)

2. 识别步骤 1 中提取的实体之间的相关关系。对于每一对相关实体，提取以下信息：
- source_entity：源实体的名称，与步骤 1 中的实体名称一致
- target_entity：目标实体的名称，与步骤 1 中的实体名称一致
- relationship_description：阐述源实体与目标实体之间的关联性，避免引用辅助理解的例子
- relationship_strength：一个数值，表示源实体与目标实体之间关系的强度
将每个关系格式化为：("relationship"{tuple_delimiter}<source_entity>{tuple_delimiter}<target_entity>{tuple_delimiter}<relationship_description>{tuple_delimiter}<relationship_strength>)

3. 使用中文返回步骤 1 和 2 中识别的所有实体和关系的列表。列表项之间使用**{record_delimiter}**分隔。

4. 任务完成后，输出{completion_delimiter}

-注意-
1. 专注于提取与实体和关系直接相关的内容。

2. 忽略公式中的字母、数字以及图片编号等非实体标识。

3. 忽略用于解释或辅助理解实体的举例文本。

4. 避免将完整的标题或章节名作为实体名称。

5. 确保实体名称不是由公式中的字母或数字构成。

######################
-示例-
######################
示例 1:
实体类型: [概念, 定理, 性质, 原理, 算法, 数学家]
文本:
集合论中有一些非常重要和常用的特殊集合，它们分别具有一些特殊性质。离散数学中很多基本概念的定义及其性质讨论都离不开它们。下面具体介绍这些特殊集合的基本概念及性质，包括空集、全集、有限集、无限集、子集、幂集等。
################
输出:
("entity"{tuple_delimiter}空集{tuple_delimiter}概念{tuple_delimiter}空集是不含任何元素的集合，是所有集合的子集。){record_delimiter}
("entity"{tuple_delimiter}全集{tuple_delimiter}概念{tuple_delimiter}全集是包含所讨论范围内所有元素的集合。){record_delimiter}
("entity"{tuple_delimiter}有限集{tuple_delimiter}概念{tuple_delimiter}有限集是含有有限数量元素的集合。){record_delimiter}
("entity"{tuple_delimiter}无限集{tuple_delimiter}概念{tuple_delimiter}无限集是含有无限数量元素的集合。){record_delimiter}
("entity"{tuple_delimiter}子集{tuple_delimiter}概念{tuple_delimiter}子集是一个集合中的元素全部属于另一个集合时，称这个集合为另一个集合的子集。){record_delimiter}
("entity"{tuple_delimiter}幂集{tuple_delimiter}概念{tuple_delimiter}幂集是一个集合的所有子集构成的集合。){record_delimiter}
("relationship"{tuple_delimiter}空集{tuple_delimiter}全集{tuple_delimiter}空集是全集的子集，不含任何元素，而全集包含所有元素。{tuple_delimiter}3){record_delimiter}
("relationship"{tuple_delimiter}有限集{tuple_delimiter}无限集{tuple_delimiter}有限集和无限集是根据集合中元素的数量来区分的，有限集含有有限元素，无限集含有无限元素。{tuple_delimiter}3){record_delimiter}
("relationship"{tuple_delimiter}子集{tuple_delimiter}幂集{tuple_delimiter}幂集中的每一个元素都是原集合的子集。{tuple_delimiter}4){record_delimiter}
{completion_delimiter}

#############################
示例 2:
实体类型: [概念, 定理, 性质, 原理, 算法, 数学家]
文本:
鸽笼原理是数学神童狄利克雷在9 岁时提出，那时他家中有九个鸽笼十只鸽子，他观察到这样一个现象：无论怎样分配鸽笼给鸽子，必然一个鸽笼里面至少有两只鸽子，便由此提出鸽笼原理，并用该原理解决很多数学问题。鸽笼原理有时也称为抽屉法则，通俗地说，就是将5 本书放在4 个抽屉里面，必然有一个抽屉至少有两本书。
【定理1.11】如果把多于$n$ 个的元素按任一方式分成$n$ 个集合，那么至少有一个集合中含有两个或两个以上的元素。
【定理1.12】将$n$ 个元素以任一方式分成$m$ 个集合且$m<n$，则必然存在一个集合中至少有含有$\lfloor(n-1)/m\rfloor+1$个元素。其中$\lfloor x\rfloor$表示对实数$x$ 进行向下下取整，即取不超过$x$ 的最大整数部分。
#############
输出:
("entity"{tuple_delimiter}鸽笼原理{tuple_delimiter}原理{tuple_delimiter}鸽笼原理是指如果将多于$n$个的元素按任一方式分成$n$个集合，那么至少有一个集合中含有两个或两个以上的元素。){record_delimiter}
("entity"{tuple_delimiter}抽屉法则{tuple_delimiter}概念{tuple_delimiter}抽屉法则是对鸽笼原理的通俗说法，即将多于抽屉数量的物品放入抽屉中，必然有至少一个抽屉内放有两个或以上的物品。){record_delimiter}
("entity"{tuple_delimiter}定理1.11{tuple_delimiter}定理{tuple_delimiter}定理1.11指出，如果把多于$n$个的元素按任一方式分成$n$个集合，那么至少有一个集合中含有两个或两个以上的元素。){record_delimiter}
("entity"{tuple_delimiter}定理1.12{tuple_delimiter}定理{tuple_delimiter}定理1.12指出，将$n$个元素以任一方式分成$m$个集合且$m<n$，则必然存在一个集合中至少含有$\lfloor(n-1)/m\rfloor+1$个元素。){record_delimiter}
("entity"{tuple_delimiter}狄利克雷{tuple_delimiter}数学家{tuple_delimiter}狄利克雷是提出鸽笼原理的数学家，他在9岁时观察到家中鸽笼和鸽子的现象并提出了这一原理。){record_delimiter}
("relationship"{tuple_delimiter}鸽笼原理{tuple_delimiter}抽屉法则{tuple_delimiter}鸽笼原理又称为抽屉法则，两者是同一原理的不同表述。{tuple_delimiter}4){record_delimiter}
("relationship"{tuple_delimiter}鸽笼原理{tuple_delimiter}定理1.11{tuple_delimiter}定理1.11是对鸽笼原理的具体数学表述。{tuple_delimiter}5){record_delimiter}
("relationship"{tuple_delimiter}鸽笼原理{tuple_delimiter}定理1.12{tuple_delimiter}定理1.12是鸽笼原理的一个推广形式。{tuple_delimiter}4){record_delimiter}
("relationship"{tuple_delimiter}狄利克雷{tuple_delimiter}鸽笼原理{tuple_delimiter}狄利克雷是鸽笼原理的提出者。{tuple_delimiter}5){record_delimiter}
{completion_delimiter}

#############################
示例 3:
实体类型: [person, role, technology, organization, event, location, concept]
文本:
如前所述，图的着色问题起源于对地图中每个国家领土的着色问题。例如，对于如图$10-$62 所示的地图，显然可以用4 种颜色对该地图中每个国家的领土进行标定。不难看出，该地图其实是一种连通无桥平面图，每个国家的领土范围对应于该平面图的一个面。因此，对地图中每个国家领土的着色问题，可转化为对这种特殊平面图中面的着色问题。
下面考察基于这种特殊平面图的面着色问题，首先给出面着色的相关定义：
【定义10.13】连通无桥平面图及其所有有限面称为地图。地图中每有限面分别称为一个国家，若两个国家至少有一条公共边，则称这两个国家相邻。如果对给定地图$G$上每个国家涂上或标注一种颜色，使得相邻的国家具有不同的颜色，则称这种操作是对图$G$的面着色。若可用$k$种颜色就可完成对地图$G$的面着色，则称$G$是$k{-}$面可着色的。若$G$是$k{-}$面可着色的，但不是$(k-1){-}$面可着色的，则称$G$是${k}$-色地图，称$ k$为$G$的面色数，记为$\chi^{*}(G)$。
事实上，对地图的面着色可以通过平面图的结点着色来研究。这是因为平面图$G$的对偶图$G^{*}$也是一个平面图，并且图$G$的每个面与图$G^{*}$的每个结点之间具有一一对应的关系。例如，对10-62（a）所示的面着色问题，可以转化为10-62（b）所示的结点着色问题。下面的定理10.22 揭示了作为地图的一种特殊平面图与其对偶图之间的色数关系：
【定理10.22】地图$G$是$k^{-}$面可着色图，当且仅当它的对偶图$G^{*}$是$k^{-}$可着色图。
【定理10.23】设$G=\langle V,E\rangle$是简单平面图，则$G$中至少存在一个度数不超过5 的结点。
下面给出关于平面图结点着色的五色定理：
【定理10.24】（五色定理）设$G=\langle V,E\rangle$是任意给定的一个连通简单平面图，则$G$的点色数为5。
上述五色定理是数学家赫伍德在研究四色猜想时给出的一个重要结论，可以说是四色猜想研究历史上的一个重大突破。四色猜想是一个与哥德巴赫猜想、黎曼猜想同样著名的数学猜想。该猜想最初由英国青年佛朗西斯·格里斯在1852 年提出：
四色猜想：连通简单平面图的色数不超过4。
公元1852 年，毕业于英国伦敦大学并从事地图着色工作的佛朗西斯·格里斯，发现了一个奇怪的现象：无论多么复杂的地图，只要用四种颜色，就可以区分有公共边界的国家和地区。佛朗西斯觉得这中间一定有什么奥妙，便求教著名的英国数学家摩根。摩根对此苦苦思索了几个昼夜后还是不得其解，便写信给著名数学家哈密顿，希望哈密尔顿要么能证明这个问题，要么构造出一个需要五种或更多种颜色的图来。然而，智慧超人的哈密尔顿耗费了整整13 年心血，终于一筹莫展，抱恨逝去！
哈密尔顿死后，又过了13 年，英国数学家凯莱在一次数学年会上把这个问题归纳为四色猜想，并于公元1879 年在英国皇家地理会刊的创刊号上，公开征求对四色猜想的解答。在征解消息发出的同年，一位半路出家的数学家肯普，发表了一个关于四色定理的证明。人们普遍以为四色猜想已经成为历史。不料过了11 年，即公元1890 年，一个名叫赫伍德的青年，指出了肯普在证明中的错误。与此同时，赫伍德匠心独运，利用肯普提供的方法，成功地证明了上述五色定理。由于存在不可3-着色的平面图$K_{4}$，故四色定理若得到证明，将是平面图色数问题的最佳结果。
1976 年6 月，美国两位著名数学家阿佩尔和海肯通过计算机计算了1200 小时，通过数组计算的方法验证了四色猜想的正确性。据此，人们将四色猜想改名为四色定理。但是，四色定理并没有得到所以数学家的认可，因为目前还没理论上严谨的数学证明。
#############
输出:
("entity"{tuple_delimiter}连通无桥平面图{tuple_delimiter}概念{tuple_delimiter}连通无桥平面图是一种特殊类型的平面图，其中每个面至少与一条边相连，且没有桥（即去掉后不增加连通分支的边）。){record_delimiter}
("entity"{tuple_delimiter}面着色{tuple_delimiter}概念{tuple_delimiter}面着色是对地图中每个国家领土的着色，使得相邻的国家具有不同的颜色。){record_delimiter}
("entity"{tuple_delimiter}k-面可着色{tuple_delimiter}概念{tuple_delimiter}若可用k种颜色对地图G的面进行着色，使得相邻的面具有不同的颜色，则称G是k-面可着色的。){record_delimiter}
("entity"{tuple_delimiter}k-色地图{tuple_delimiter}概念{tuple_delimiter}若地图G是k-面可着色的，但不是(k-1)-面可着色的，则称G是k-色地图。){record_delimiter}
("entity"{tuple_delimiter}面色数{tuple_delimiter}概念{tuple_delimiter}地图G的面色数，记为χ*(G)，是指使G成为k-色地图的最小颜色数k。){record_delimiter}
("entity"{tuple_delimiter}定理10.22{tuple_delimiter}定理{tuple_delimiter}定理10.22揭示了地图G与其对偶图G*之间的色数关系，即G是k-面可着色图当且仅当G*是k-可着色图。){record_delimiter}
("entity"{tuple_delimiter}定理10.23{tuple_delimiter}定理{tuple_delimiter}定理10.23指出，在简单平面图G中至少存在一个度数不超过5的结点。){record_delimiter}
("entity"{tuple_delimiter}五色定理{tuple_delimiter}定理{tuple_delimiter}五色定理表明，任意给定的一个连通简单平面图的点色数为5。){record_delimiter}
("entity"{tuple_delimiter}四色猜想{tuple_delimiter}概念{tuple_delimiter}四色猜想是连通简单平面图的色数不超过4的数学猜想。){record_delimiter}
("entity"{tuple_delimiter}赫伍德{tuple_delimiter}数学家{tuple_delimiter}赫伍德是提出五色定理的数学家，他在研究四色猜想时给出了这个重要结论。){record_delimiter}
("entity"{tuple_delimiter}阿佩尔和海肯{tuple_delimiter}数学家{tuple_delimiter}阿佩尔和海肯通过计算机验证了四色猜想的正确性，并将其改名为四色定理。){record_delimiter}
("relationship"{tuple_delimiter}连通无桥平面图{tuple_delimiter}面着色{tuple_delimiter}连通无桥平面图的面着色问题可以转化为平面图中面的着色问题。{tuple_delimiter}4){record_delimiter}
("relationship"{tuple_delimiter}面着色{tuple_delimiter}k-面可着色{tuple_delimiter}k-面可着色是对面着色问题的一种量化描述。{tuple_delimiter}5){record_delimiter}
("relationship"{tuple_delimiter}k-面可着色{tuple_delimiter}k-色地图{tuple_delimiter}k-色地图是k-面可着色地图的特例。{tuple_delimiter}4){record_delimiter}
("relationship"{tuple_delimiter}k-色地图{tuple_delimiter}面色数{tuple_delimiter}面色数是描述k-色地图所需颜色的最小数目。{tuple_delimiter}5){record_delimiter}
("relationship"{tuple_delimiter}定理10.22{tuple_delimiter}对偶图{tuple_delimiter}定理10.22讨论了地图与其对偶图在面着色方面的等价性。{tuple_delimiter}5){record_delimiter}
("relationship"{tuple_delimiter}定理10.23{tuple_delimiter}简单平面图{tuple_delimiter}定理10.23给出了简单平面图中结点度数的一个下界。{tuple_delimiter}3){record_delimiter}
("relationship"{tuple_delimiter}五色定理{tuple_delimiter}赫伍德{tuple_delimiter}赫伍德提出了五色定理，这是四色猜想研究历史上的一个重大突破。{tuple_delimiter}4){record_delimiter}
("relationship"{tuple_delimiter}四色猜想{tuple_delimiter}阿佩尔和海肯{tuple_delimiter}阿佩尔和海肯验证了四色猜想的正确性，并将其改名为四色定理。{tuple_delimiter}5){record_delimiter}
{completion_delimiter}

#############################
-真实数据-
######################
实体类型: {entity_types}
文本: {input_text}
######################
输出: