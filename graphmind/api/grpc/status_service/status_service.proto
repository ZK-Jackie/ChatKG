syntax = "proto3";

package graphmind.grpc.status_service;

/*  build command:
    python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. status_service.proto
 */
// 状态
enum StatusId {
  // 未处理
  UNPROCESS = 0;
  // 正在处理
  PROCESSING = 1;
  // 处理完成
  PROCESSED = 2;
  // 处理失败
  FAILED = 3;
  // 处理超时
  TIMEOUT = 4;
  // 处理中断
  CANCELLED = 5;
  // 就绪等待处理（由 Java 端向 Python 端发送）
  READY = 10;
  // 开始处理（由 Java 端向 Python 端发送）
  START = 11;
  // 暂停处理，可以继续（由 Java 端向 Python 端发送）
  PAUSE = 12;
  // 继续处理（由 Java 端向 Python 端发送）
  CONTINUE = 13;
  // 结束处理，无法继续（由 Java 端向 Python 端发送）
  END = 14;
}

// 定义当前处理状态信息
message ProcessStatus {
  // 用户 ID
  string userId = 1;
  // 对话 ID
  string convId = 2;
  // 正在被处理的消息 ID
  string userMessageId = 3;
  // 当前处理信号 / 接收到的控制信号
  StatusId statusId = 4;
  // 当前处理状态信息
  string statusMessage = 5;
  // 当前处理状态信号发送时间（即发送信息的这个状态的开始时间，也是上一个状态的结束时间）
  string sendTime = 6;
}

message Empty {}

// 定义状态发送、状态控制服务
service StatusService {
  // 发送当前处理状态信息（理解：python 汇报处理状态，提供 ProcessStatus，但 Java 端只需返回空）
  rpc report (ProcessStatus) returns (Empty) {}
  // 接受状态控制信息（理解：Java 端发送控制信息，提供 ProcessStatus；python 端只需返回空，晚点 python 做一个 report）
  rpc control (ProcessStatus) returns (Empty) {}
}
